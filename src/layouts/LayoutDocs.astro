---
import DocsNavbar from "../components/DocsNavbar.astro";
import DocsSidebar from "../components/DocsSidebar.astro";

interface Props {
	title: string;
	description?: string;
	keywords?: string;
}

interface Props {
	frontmatter;
}

const { frontmatter } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={frontmatter.description} />
		<meta name="keywords" content={frontmatter.keywords} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" href="/favicon.ico" />
		<meta name="generator" content={Astro.generator} />
		<link rel="sitemap" href="/sitemap-index.xml" />
		<title>{frontmatter.title}</title>

		<!-- Paste this right before your closing </head> tag -->
		<script type="text/javascript">
			(function (f, b) {
				if (!b.__SV) {
					var e, g, i, h;
					window.mixpanel = b;
					b._i = [];
					b.init = function (e, f, c) {
						function g(a, d) {
							var b = d.split(".");
							2 == b.length && ((a = a[b[0]]), (d = b[1]));
							a[d] = function () {
								a.push(
									[d].concat(
										Array.prototype.slice.call(
											arguments,
											0,
										),
									),
								);
							};
						}
						var a = b;
						"undefined" !== typeof c
							? (a = b[c] = [])
							: (c = "mixpanel");
						a.people = a.people || [];
						a.toString = function (a) {
							var d = "mixpanel";
							"mixpanel" !== c && (d += "." + c);
							a || (d += " (stub)");
							return d;
						};
						a.people.toString = function () {
							return a.toString(1) + ".people (stub)";
						};
						i =
							"disable time_event track track_pageview track_links track_forms track_with_groups add_group set_group remove_group register register_once alias unregister identify name_tag set_config reset opt_in_tracking opt_out_tracking has_opted_in_tracking has_opted_out_tracking clear_opt_in_out_tracking start_batch_senders people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user people.remove".split(
								" ",
							);
						for (h = 0; h < i.length; h++) g(a, i[h]);
						var j = "set set_once union unset remove delete".split(
							" ",
						);
						a.get_group = function () {
							function b(c) {
								d[c] = function () {
									call2_args = arguments;
									call2 = [c].concat(
										Array.prototype.slice.call(
											call2_args,
											0,
										),
									);
									a.push([e, call2]);
								};
							}
							for (
								var d = {},
									e = ["get_group"].concat(
										Array.prototype.slice.call(
											arguments,
											0,
										),
									),
									c = 0;
								c < j.length;
								c++
							)
								b(j[c]);
							return d;
						};
						b._i.push([e, f, c]);
					};
					b.__SV = 1.2;
					e = f.createElement("script");
					e.type = "text/javascript";
					e.async = !0;
					e.src =
						"undefined" !== typeof MIXPANEL_CUSTOM_LIB_URL
							? MIXPANEL_CUSTOM_LIB_URL
							: "file:" === f.location.protocol &&
								  "//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(
										/^\/\//,
								  )
								? "https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js"
								: "//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";
					g = f.getElementsByTagName("script")[0];
					g.parentNode.insertBefore(e, g);
				}
			})(document, window.mixpanel || []);
			mixpanel.init("8531ce0ef1b71386ed6bfb168e258a7f", {
				debug: false,
				ignore_dnt: true,
				track_pageview: false,
			});
			// Set this to a unique identifier for the user performing the event.
			// mixpanel.identify('USER_ID')
			// Track an event. It can be anything, but in this example, we're tracking a Sign Up event.
			mixpanel.track("visit Landing page", {
				"Cloudflare Pages": true,
				i18n: "zh",
			});
		</script>
		<script type="text/javascript">
			(function (c, l, a, r, i, t, y) {
				c[a] =
					c[a] ||
					function () {
						(c[a].q = c[a].q || []).push(arguments);
					};
				t = l.createElement(r);
				t.async = 1;
				t.src = "https://www.clarity.ms/tag/" + i;
				y = l.getElementsByTagName(r)[0];
				y.parentNode.insertBefore(t, y);
			})(window, document, "clarity", "script", "ksbkb9e48r");
		</script>
	</head>
	<body>
		<DocsNavbar />
		<DocsSidebar />
		<div class="py-20 px-24 ml-72 text-lg">
			<div
				class="prose-h1:font-bold prose-h1:pb-6 prose-h1:text-4xl prose-h2:text-xl prose-h2:font-bold prose-p:pb-4 prose-p:leading-relaxed prose-p:text-neutral-600 prose-p:text-base
				prose-a:text-fuchsia-500 prose-img:max-w-60"
			>
				<slot />
			</div>
		</div>
	</body>
</html>
<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		font-family: system-ui, sans-serif;
		scroll-behavior: smooth;
	}
	body {
		height: 100%;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
</style>
